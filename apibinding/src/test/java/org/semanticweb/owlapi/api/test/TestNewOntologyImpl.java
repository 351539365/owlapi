package org.semanticweb.owlapi.api.test;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLObjectPropertyExpression;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyManager;

public class TestNewOntologyImpl {
	public static void execute(OWLOntology o1, OWLClass A, OWLObjectProperty p,
			OWLObjectPropertyExpression inv) throws Exception {
//		System.out.println(o1.getAxiomCount(AxiomType.SWRL_RULE));
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getImportsDeclarations());
//		System.out.println(o1.getAnnotations());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getDatatypesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getAnnotationAssertionAxioms(p.getIRI()));
//		System.out.println(o1.getDeclarationAxioms(p));
//		System.out.println(o1.getAxioms(p));
//		System.out.println(o1.getAxioms(AxiomType.SUB_PROPERTY_CHAIN_OF));
		System.out.println(o1.getAxioms(inv));
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getAnnotationAssertionAxioms(A.getIRI()));
//		System.out.println(o1.getDeclarationAxioms(A));
//		System.out.println(o1.getAxioms(A));
//		System.out.println(o1.getAxioms(AxiomType.HAS_KEY));
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.getReferencedAnonymousIndividuals());
//		System.out.println(o1.getAxioms(AxiomType.ANNOTATION_ASSERTION));
//		System.out.println(o1.getGeneralClassAxioms());
//		System.out.println(o1.getAxioms(AxiomType.DIFFERENT_INDIVIDUALS));
//		System.out.println(o1.getAxioms(AxiomType.DISJOINT_CLASSES));
//		System.out.println(o1.getAxioms(AxiomType.DISJOINT_OBJECT_PROPERTIES));
//		System.out.println(o1.getAxioms(AxiomType.DISJOINT_DATA_PROPERTIES));
//		System.out.println(o1.getAxioms(AxiomType.HAS_KEY));
//		System.out.println(o1.getAxioms(AxiomType.SWRL_RULE));
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.getImportsDeclarations());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getDatatypesInSignature());
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.getAxioms());
//		System.out.println(o1.getAxioms());
//		System.out.println(o1.getSignature());
//		System.out.println(o1.isDeclared(A));
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.getImportsDeclarations());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getDatatypesInSignature());
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.getAxioms());
//		System.out.println(o1.getAxioms());
//		System.out.println(o1.getAnnotations());
//		System.out.println(o1.getAnnotations());
//		System.out.println(o1.getSignature());
//		System.out.println(o1.isDeclared(A));
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.getDeclarationAxioms(A));
//		System.out.println(o1.getAnnotationAssertionAxioms(A.getIRI()));
//		System.out.println(o1.getAxioms(A));
//		System.out.println(o1.getDeclarationAxioms(p));
//		System.out.println(o1.getAnnotationAssertionAxioms(p.getIRI()));
//		System.out.println(o1.getAxioms(p));
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.getImportsDeclarations());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getDatatypesInSignature());
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.getAxioms());
//		System.out.println(o1.getAxioms());
//		System.out.println(o1.getAnnotations());
//		System.out.println(o1.getAnnotations());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.getImportsDeclarations());
//		System.out.println(o1.getAnnotations());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getDatatypesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getAnnotationAssertionAxioms(p.getIRI()));
//		System.out.println(o1.getDeclarationAxioms(p));
//		System.out.println(o1.getAxioms(p));
//		System.out.println(o1.getAxioms(AxiomType.SUB_PROPERTY_CHAIN_OF));
//		System.out.println(o1.getAxioms(inv));
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getAnnotationAssertionAxioms(A.getIRI()));
//		System.out.println(o1.getDeclarationAxioms(A));
//		System.out.println(o1.getAxioms(A));
//		System.out.println(o1.getAxioms(AxiomType.HAS_KEY));
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.getReferencedAnonymousIndividuals());
//		System.out.println(o1.getAxioms(AxiomType.ANNOTATION_ASSERTION));
//		System.out.println(o1.getGeneralClassAxioms());
//		System.out.println(o1.getAxioms(AxiomType.DIFFERENT_INDIVIDUALS));
//		System.out.println(o1.getAxioms(AxiomType.DISJOINT_CLASSES));
//		System.out.println(o1.getAxioms(AxiomType.DISJOINT_OBJECT_PROPERTIES));
//		System.out.println(o1.getAxioms(AxiomType.DISJOINT_DATA_PROPERTIES));
//		System.out.println(o1.getAxioms(AxiomType.HAS_KEY));
//		System.out.println(o1.getAxioms(AxiomType.SWRL_RULE));
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.getImportsDeclarations());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getDatatypesInSignature());
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.isEmpty());
//		System.out.println(o1.getAnnotationPropertiesInSignature());
//		System.out.println(o1.getDataPropertiesInSignature());
//		System.out.println(o1.getObjectPropertiesInSignature());
//		System.out.println(o1.getClassesInSignature());
//		System.out.println(o1.getDatatypesInSignature());
//		System.out.println(o1.getIndividualsInSignature());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.isAnonymous());
//		System.out.println(o1.getAxioms());
//		System.out.println(o1.getAxioms());
	}

	public static void main(String[] args) throws Exception {
		OWLOntologyManager m = Factory.getManager();
		OWLOntology o = m.createOntology();
		OWLDataFactory f = m.getOWLDataFactory();
		final OWLObjectProperty p = f.getOWLObjectProperty(IRI.create("urn:p"));
		final OWLClass A = f.getOWLClass(IRI.create("urn:A"));
		m.addAxiom(o, f.getOWLObjectPropertyDomainAxiom(p.getInverseProperty(), A));
		execute(o, A, p, p.getInverseProperty());
	}
}
