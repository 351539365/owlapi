/* Generated By:JavaCC: Do not edit this line. KRSS2ParserConstants.java */
package de.uulm.ecs.ai.owlapi.krssparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KRSS2ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IRI_START = 8;
  /** RegularExpression Id. */
  int IRI_END = 9;
  /** RegularExpression Id. */
  int TOP = 11;
  /** RegularExpression Id. */
  int BOTTOM = 12;
  /** RegularExpression Id. */
  int NIL = 13;
  /** RegularExpression Id. */
  int TRUE = 14;
  /** RegularExpression Id. */
  int OPENPAR = 15;
  /** RegularExpression Id. */
  int CLOSEPAR = 16;
  /** RegularExpression Id. */
  int ENDTBOX = 17;
  /** RegularExpression Id. */
  int ENDABOX = 18;
  /** RegularExpression Id. */
  int COMPOSE = 19;
  /** RegularExpression Id. */
  int DEFINECONCEPT = 20;
  /** RegularExpression Id. */
  int DEFINEPRIMITIVECONCEPT = 21;
  /** RegularExpression Id. */
  int DISJOINT = 22;
  /** RegularExpression Id. */
  int EQUIVALENT = 23;
  /** RegularExpression Id. */
  int IMPLIES = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int OR = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int ALL = 28;
  /** RegularExpression Id. */
  int ONEOF = 29;
  /** RegularExpression Id. */
  int SOME = 30;
  /** RegularExpression Id. */
  int ATLEAST = 31;
  /** RegularExpression Id. */
  int ATMOST = 32;
  /** RegularExpression Id. */
  int EXACTLY = 33;
  /** RegularExpression Id. */
  int DEFINEROLE = 34;
  /** RegularExpression Id. */
  int DEFINEPRIMITIVEROLE = 35;
  /** RegularExpression Id. */
  int DISJOINTROLES = 36;
  /** RegularExpression Id. */
  int DOMAIN_ATTRIBUTE = 37;
  /** RegularExpression Id. */
  int IMPLIESROLE = 38;
  /** RegularExpression Id. */
  int INV = 39;
  /** RegularExpression Id. */
  int INVERSE = 40;
  /** RegularExpression Id. */
  int INVERSE_ATTRIBUTE = 41;
  /** RegularExpression Id. */
  int LEFT_IDENTITY_ATTRIBUTE = 42;
  /** RegularExpression Id. */
  int PARENT = 43;
  /** RegularExpression Id. */
  int PARENTS = 44;
  /** RegularExpression Id. */
  int RANGE = 45;
  /** RegularExpression Id. */
  int RANGE_ATTRIBUTE = 46;
  /** RegularExpression Id. */
  int REFLEXIVE_ATTRIBUTE = 47;
  /** RegularExpression Id. */
  int RIGHT_IDENTITY_ATTRIBUTE = 48;
  /** RegularExpression Id. */
  int ROLESEQUIVALENT = 49;
  /** RegularExpression Id. */
  int ROLE_INCLUSION = 50;
  /** RegularExpression Id. */
  int SUBROLE = 51;
  /** RegularExpression Id. */
  int SYMMETRIC_ATTRIBUTE = 52;
  /** RegularExpression Id. */
  int TRANSITIVE = 53;
  /** RegularExpression Id. */
  int TRANSITIVE_ATTRIBUTE = 54;
  /** RegularExpression Id. */
  int DEFINEINDIVIDUAL = 55;
  /** RegularExpression Id. */
  int DISTINCT = 56;
  /** RegularExpression Id. */
  int EQUAL = 57;
  /** RegularExpression Id. */
  int INSTANCE = 58;
  /** RegularExpression Id. */
  int RELATED = 59;
  /** RegularExpression Id. */
  int DPOINT = 60;
  /** RegularExpression Id. */
  int ENUM = 61;
  /** RegularExpression Id. */
  int INT = 62;
  /** RegularExpression Id. */
  int NAME = 63;
  /** RegularExpression Id. */
  int NCCHAR_FULL = 64;
  /** RegularExpression Id. */
  int NCCHAR1 = 65;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_IRI = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\\"\"",
    "\"|\"",
    "\"\\\\\"",
    "\"\\n\"",
    "\"<\"",
    "\">\"",
    "<token of kind 10>",
    "<TOP>",
    "<BOTTOM>",
    "\"NIL\"",
    "\"t\"",
    "\"(\"",
    "\")\"",
    "\"end-tbox\"",
    "\"end-abox\"",
    "\"compose\"",
    "\"define-concept\"",
    "\"define-primitive-concept\"",
    "\"disjoint\"",
    "\"equivalent\"",
    "\"implies\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "\"ALL\"",
    "\"one-of\"",
    "\"SOME\"",
    "\"AT-LEAST\"",
    "\"AT-MOST\"",
    "\"EXACTLY\"",
    "\"define-role\"",
    "\"define-primitive-role\"",
    "\"disjoint-roles\"",
    "\":domain\"",
    "\"implies-role\"",
    "\"inv\"",
    "\"inverse\"",
    "\":inverse\"",
    "\":left-identity\"",
    "\":parent\"",
    "\":parents\"",
    "\"range\"",
    "\":range\"",
    "\":reflexive\"",
    "\":right-identity\"",
    "\"roles-equivalent\"",
    "\"role-inclusion\"",
    "\"subrole\"",
    "\":symmetric\"",
    "\"TRANSITIVE\"",
    "<TRANSITIVE_ATTRIBUTE>",
    "\"define-individual\"",
    "\"distinct\"",
    "\"equal\"",
    "\"instance\"",
    "\"related\"",
    "\":\"",
    "\"enum\"",
    "<INT>",
    "<NAME>",
    "<NCCHAR_FULL>",
    "<NCCHAR1>",
  };

}
